\chapter{Implementation}
\section{Agents}

\subsection{Author}
\begin{lstlisting}
  public class Author implements ISDoS{
	private int id;
	private ArrayList<Discipline> disciplines = new ArrayList<Discipline>();
	private ArrayList<Paper> papers = new ArrayList<Paper>();
	private Community community;

	public Author() {}

	public Author(int id) {
		this.id = id;
		this.setCommunity(new Community());
	}

	public void step(Double pW, Paper paper) {
		this.papers.add(paper); // Add paper to author's written papers.
		paper.getAuthors().add(this); // Add author to paper's co-author list.
		paper.getSharedDisciplines().addAll(disciplines); // Diffusion of knowledge, pass collective knowledge through paper.
		
		// Get environmental containers.
		Context<ISDoS> context = ContextUtils.getContext(this);
		// Get co-authership network.
		Network<ISDoS> net = (Network<ISDoS>)context.getProjection("coAuthorship network");
		
		if(RandomHelper.nextDoubleFromTo(0, 1) < pW){
			System.out.println("Next walk"); // A tracker for debugging.
			
			double[] pdf = new double[net.getDegree(this)]; // Probability distribution function among neighbors of author in network.
			
			double totalWeight = 0; // Total weight of edges in network.
			for(RepastEdge<ISDoS> edge : net.getEdges()){
				totalWeight += edge.getWeight();
			}
			int index = 0;
			ArrayList<Object> neighbours = new ArrayList<Object>();
			for(RepastEdge<ISDoS> edge : net.getEdges(this)){
				double weightOfedge = edge.getWeight();
				double transitionProbability = weightOfedge / totalWeight; // Transition probability as explained above.
				pdf[index] = transitionProbability;
				index++;
				neighbours.add(edge.getTarget());
			}
			
			RandomHelper.createEmpiricalWalker(pdf, 0); // A random distribution according to given pdf.
			int indexOfneighbour = RandomHelper.getEmpiricalWalker().nextInt();
			Author nextAuthor = (Author)neighbours.get(indexOfneighbour); // Get next possible co-author candidate.
			nextAuthor.step(pW, paper); // Continue to walk through next candidate author.
			
		} else {
			paper.decideDiscipline(context); // Decide main discipline of paper.
			paper.updateDisciplinesOfAuthors(); // Update disciplines of co-authors.
			paper.updateCoAuthorNetwork(); // Update network according new knowledge.
		}
	}
\end{lstlisting}

\subsection{Paper}
\begin{lstlisting}
 public class Paper implements ISDoS{
	private Integer id;
	private ArrayList<Author> authors = new ArrayList<Author>();
	private Discipline discipline;
	private ArrayList<Discipline> unionOfSharedDisciplines = new ArrayList<Discipline>();
	
	public Paper(Integer id) {
		this.id = id;
	}

	public Paper(Integer id, ArrayList<Author> authors, Discipline discipline,
			ArrayList<Discipline> sharedDisciplines) {
		this.id = id;
		this.authors = authors;
		this.discipline = discipline;
		this.unionOfSharedDisciplines = sharedDisciplines;
	}

	public void decideDiscipline(Context<ISDoS> context){
		IndexedIterable<ISDoS> allDisciplines = context.getObjects(Discipline.class);
		int[] disciplineCount = new int[allDisciplines.size()];
		for(Discipline d : unionOfSharedDisciplines){
			disciplineCount[d.getId()] ++;
		}
		// For this stage only one discipline is set for a paper.
		int mostlySharedDisciplineID = 0;
		for(int i = 0; i < disciplineCount.length; i++){
			if(disciplineCount[i] > mostlySharedDisciplineID){
				mostlySharedDisciplineID = i;
			}
		}
		 setDiscipline((Discipline)allDisciplines.get(mostlySharedDisciplineID));
	}
	
	public void updateDisciplinesOfAuthors(){
		for(Author author : authors){
			if(!author.getDisciplines().contains(discipline)){
				author.getDisciplines().add(discipline);
			}
		}
	}
	
	public void updateCoAuthorNetwork(){
		Context<ISourceContext> context = ContextUtils.getContext(this);
		Network<ISDoS> net = (Network<ISDoS>)context.getProjection("coAuthorship network");
		System.out.println("Authors:" + authors.size());
		for(int i = 0; i < authors.size(); i++){
			for(int j = i+1; j < authors.size(); j++){
				System.out.println("Added "+authors.get(i).getId()+" "+authors.get(j).getId());
				RepastEdge<ISDoS> edge = net.getEdge(authors.get(i), authors.get(j));
				if(edge == null){
					net.addEdge(authors.get(i), authors.get(j));
				} else {
					edge.setWeight(edge.getWeight()+1);
				}
			}
		}
	}
}
\end{lstlisting}

\subsection{Discipline}
\begin{lstlisting}
public class Discipline implements ISDoS{
	private Integer id;

	public Discipline(Integer id) {
		this.id = id;
	}
}
\end{lstlisting}

\subsection{Community}
\begin{lstlisting}
public class Community implements ISDoS {
	private int id;
	private ArrayList<Author> authors = new ArrayList<Author>();
	private ArrayList<Paper> papers = new ArrayList<Paper>();
	
	public Community(){}

	public Community(int id, ArrayList<Author> authors, ArrayList<Paper> papers) {
		this.id = id;
		this.authors = authors;
		this.papers = papers;
	}
}
\end{lstlisting}

\section{Builder and Simulator}
\begin{lstlisting}
  
\end{lstlisting}
\newpage

